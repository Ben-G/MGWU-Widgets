////  SWTableView.h//  SWTable////  Copyright (c) 2010 Sangwoo Im//  Copyright 2013 MakeGamesWithUs Inc.//  Modified by Brian Chu for MakeGamesWithUs////  Permission is hereby granted, free of charge, to any person obtaining a copy//  of this software and associated documentation files (the "Software"), to deal//  in the Software without restriction, including without limitation the rights//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell//  copies of the Software, and to permit persons to whom the Software is//  furnished to do so, subject to the following conditions:////  The above copyright notice and this permission notice shall be included in//  all copies or substantial portions of the Software.////  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN//  THE SOFTWARE.//#import "SWScrollView.h"@class SWTableViewCell, SWTableView;typedef enum{    SWTableViewFillTopDown,    SWTableViewFillBottomUp} SWTableViewVerticalFillOrder;/** Purpose of this delegate is for single touch events in this version and response to refresh (possibly pull-to-refresh)*/@protocol SWTableViewDelegate <SWScrollViewDelegate>-(void)tableView:(SWTableView *)table cellTouched:(SWTableViewCell *)cell;@optional-(void)refresh;@end/** Data source that governs table backend data. */@protocol SWTableViewDataSource <NSObject>@property (nonatomic) CGSize tableContentSize;@property (nonatomic) BOOL hasVariableCellSize; //YES = cell sizes differ-(CGSize)tableView:(SWTableView *)table cellSizeForIndex:(NSUInteger)index;-(float)tableView:(SWTableView *)table heightFromCellIndex:(NSUInteger)index1 toIndex:(NSUInteger)index2;-(float)tableView:(SWTableView *)table widthFromCellIndex:(NSUInteger)index1 toIndex:(NSUInteger)index2;-(SWTableViewCell*)tableView:(SWTableView *)table cellAtIndex:(NSUInteger)idx;-(NSUInteger)numberOfCellsInTableView:(SWTableView *)table;@end/** UITableView counterpart for cocos2d for iphone.  A basic, minimal implementation. Built-in section titles with stacking are not implemented, nor are section index titles (which appear on a bar to the right).  SWTableView implements SWScrollViewDelegate because it must be notified when scrolling occurs. */@interface SWTableView : SWScrollView <SWScrollViewDelegate>{    SWTableViewVerticalFillOrder vordering_;@private    NSMutableIndexSet *indices_;    NSMutableArray *cellsUsed_;    NSMutableArray *cellsFreed_;    id<SWTableViewDataSource> __unsafe_unretained dataSource_;    id<SWTableViewDelegate>   __unsafe_unretained tDelegate_;}@property (nonatomic, unsafe_unretained) id<SWTableViewDataSource> dataSource;@property (nonatomic, unsafe_unretained) id<SWTableViewDelegate>   delegate;/** determines how cell is ordered and filled in the view. */@property (nonatomic, assign, setter=setVerticalFillOrder:) SWTableViewVerticalFillOrder verticalFillOrder;@property (nonatomic) BOOL hasVariableCellSize;+(id)viewWithDataSource:(id<SWTableViewDataSource>)dataSource size:(CGSize)size;+(id)viewWithDataSource:(id <SWTableViewDataSource>)dataSource size:(CGSize)size container:(CCNode *)container;-(void)updateCellAtIndex:(NSUInteger)idx;-(void)insertCellAtIndex:(NSUInteger)idx;-(void)removeCellAtIndex:(NSUInteger)idx;-(void)reloadData;-(NSArray*) cellsUsed;-(SWTableViewCell *)dequeueCell;-(SWTableViewCell *)cellAtIndex:(NSUInteger)idx;-(void) testIndexFromOffset;-(void) testScrollViewDidScroll;@end